<?php

require_once dirname(__FILE__) . '/nbaleague.taxonomy.inc';

/**
 * Implements hook_menu().
 *
 * @return array
 */
function nbaleague_menu()
{
    $items = array();

    $items['nbaleague/matches/list'] = array(
        'page callback' => 'nbaleague_get_leagues_list',
        'title' => 'NBA Seasons list',
        'access arguments' => array('access content'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'nbaleague.content.inc',
        'weight' => 0
    );

        $items['nbaleague/matches/list/%'] = array(
            'page callback' => 'nbaleague_get_seasons_list',
            'page arguments' => array(3),
            'title' => 'NBA Seasons list',
            'access arguments' => array('access content'),
            'type' => MENU_CALLBACK,
            'file' => 'nbaleague.content.inc'
        );

        $items['nbaleague/matches/list/%/%'] = array(
            'page callback' => 'nbaleague_get_matches_list',
            'page arguments' => array(3, 4),
            'title' => 'NBA Matches list',
            'access arguments' => array('access content'),
            'type' => MENU_CALLBACK,
            'file' => 'nbaleague.content.inc'
        );

    $items['admin/config/nba/league'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('nbaleague_config_form'),
        'title' => 'NBA Leagues',
        'access arguments' => array('nbaleague'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'nbaleague.admin.inc',
        'weight' => 10
    );

    $items['admin/config/nba/leagueimport'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('nbaleague_import_config_form'),
        'title' => 'NBA League - Import matches',
        'access arguments' => array('nbaleague'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'nbaleague.import.inc',
        'weight' => 20
    );

    $items['nbaleague/match'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('nbaleague_match_config_form'),
        'title' => 'NBA League - Add match',
        'access arguments' => array('nbaleague_match'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'nbaleague.match.inc',
        'weight' => 30
    );

        $items['nbaleague/match/%'] = array(
            'page callback' => 'drupal_get_form',
            'page arguments' => array('nbaleague_match_config_form', 4),
            'title' => 'NBA League - Update match',
            'access arguments' => array('nbaleague_match'),
            'type' => MENU_CALLBACK,
            'file' => 'nbaleague.match.inc',
            'weight' => 31
        );

        $items['nbaleague/match/%/delete'] = array(
            'page callback' => 'drupal_get_form',
            'page arguments' => array('nbaleague_deletematch_form', 4),
            'title' => 'NBA League - Delete match',
            'access arguments' => array('nbaleague_match'),
            'type' => MENU_CALLBACK,
            'file' => 'nbaleague.match.inc',
            'weight' => 32
        );

    $items['nbaleague/score'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('nbaleague_score_config_form'),
        'title' => 'NBA League - Add Score',
        'access arguments' => array('nbaleague_score'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'nbaleague.score.inc',
        'weight' => 40
    );

        $items['nbaleague/score/%'] = array(
            'page callback' => 'drupal_get_form',
            'page arguments' => array('nbaleague_score_config_form', 2),
            'title' => 'NBA League - Update Score',
            'access arguments' => array('nbaleague_score'),
            'type' => MENU_CALLBACK,
            'file' => 'nbaleague.score.inc',
            'weight' => 41
        );

        $items['nbaleague/score/%/delete'] = array(
            'page callback' => 'drupal_get_form',
            'page arguments' => array('nbaleague_deletescore_form', 2),
            'title' => 'NBA League - Delete score',
            'access arguments' => array('nbaleague_score'),
            'type' => MENU_CALLBACK,
            'file' => 'nbaleague.score.inc',
            'weight' => 42
        );

    return $items;
}

/**
 * Implements hook_permission()
 *
 * @return array
 */
function nbaleague_permission()
{
    return array(
        'nbaleague' => array(
            'title' => 'Manage the league system'
        ),
        'nbaleague_match' => array(
            'title' => 'Allow the user to add matches into the league system'
        ),
        'nbaleague_score' => array(
            'title' => 'Allow the user to add scores into the league system'
        )
    );
}

/**
 * Return an array of team taxonomy objects
 *
 * @return array
 */
function nbaleague_get_teams()
{
    return nbacontent_get_vocabulary('nbateam');
}

/**
 * Get a list of active clubs as an assoc array
 * 
 * @return array
 */
function nbaleague_get_teams_assoc()
{
    return _nbaleague_get_assoc_array_from_taxonomy(
        nbaleague_get_teams()
    );
}

/**
 * Get a team by its id
 * 
 * @param integer $id ID
 * 
 * @return stdClass
 */
function nbaleague_get_team_by_id($id)
{
    return _nbaleague_get_taxonomy_by_id('nbaleague_get_teams', $id);
}

/**
 * Get a list of active clubs as an assoc array
 * 
 * @return array
 */
function nbaleague_get_clubteams_assoc()
{
    $teams = _nbaleague_filter_active_taxonomies(nbaleague_get_teams());
    $clubs = array();
    foreach ($teams as $team) {
        if (!isset($clubs[$team->club->value()->title])) {
            $clubs[$team->club->value()->title] = array();
        }
        
        $clubs[$team->club->value()->title][$team->tid->value()] = $team->name->value();
    }
    
    return $clubs;
}

/**
 * Return an array of league taxonomy objects
 *
 * @return array
 */
function nbaleague_get_leagues()
{
    return nbacontent_get_vocabulary('nbaleague');
}

/**
 * Return an array of league ids/ names for select options
 *
 * @return array
 */
function nbaleague_get_leagues_assoc()
{
    return _nbaleague_get_assoc_array_from_taxonomy(
        nbaleague_get_leagues()
    );
}

/**
 * Get a league by its id
 * 
 * @param integer $id ID
 * 
 * @return stdClass
 */
function nbaleague_get_league_by_id($id)
{
    return _nbaleague_get_taxonomy_by_id('nbaleague_get_leagues', $id);
}

/**
 * Return an array of season taxonomy objects
 *
 * @return array
 */
function nbaleague_get_seasons()
{
    return nbacontent_get_vocabulary('nbaseason');
}

/**
 * Return an array of league ids/ names for select options
 *
 * @return array
 */
function nbaleague_get_seasons_assoc()
{
    return _nbaleague_get_assoc_array_from_taxonomy(
        nbaleague_get_seasons()
    );
}

/**
 * Get a season by its id
 * 
 * @param integer $id ID
 * 
 * @return stdClass
 */
function nbaleague_get_season_by_id($id)
{
    return _nbaleague_get_taxonomy_by_id('nbaleague_get_seasons', $id);
}

/**
 * Return the nbaleague select
 * 
 * @return SelectQuery
 */
function _nbaleague_get_query()
{
    $query = db_select('nbaleague_match', 'nbam');
    $query->fields('nbam');
    
    return $query;
}

/**
 * Return the match from given params
 * 
 * @param srray $data Data
 * 
 * @return boolean|stdClass
 */
function nbaleague_get_match_from_data($data)
{
    $query = nbaleague_get_matches_from_data($data);
    $result = $query->fetchAssoc();
    
    if ($result) {
        return $result;
    }
    
    return false;
}

/**
 * Return the match from given params
 * 
 * @param srray $data Data
 * 
 * @return boolean|stdClass
 */
function nbaleague_get_matches_from_data($data)
{
    $match = _nbaleague_get_query();
    foreach ($data as $key => $val) {
        $match->condition('nbam.' . $key, $data[$key], '=');
    }
    
    $match->orderBy('nbam.match_date');
    
    return $match->execute();
}

/**
 * Add a new match
 * 
 * @param array $data Form data from $form_state
 * 
 * @return integer
 */
function nbaleague_add_match($data)
{
    global $user;
    
    return db_insert('nbaleague_match')
        ->fields(array(
            'hometeam_id' => $data['hometeam_id'],
            'awayteam_id' => $data['awayteam_id'],
            'season_id' => $data['season_id'],
            'league_id' => $data['league_id'],
            'match_date' => _nbaleague_get_date_from_submit_data(
                $data['match_date']
            ),
            'created' => REQUEST_TIME,
            'createdby' => $user->uid
        ))->execute();
}

/**
 * 
 * @param type $data
 */
function nbaleague_update_match($match_id, $data)
{
    return db_update('nbaleague_match')
        ->fields(array(
            'hometeam_id' => $data['hometeam_id'],
            'awayteam_id' => $data['awayteam_id'],
            'season_id' => $data['season_id'],
            'league_id' => $data['league_id'],
            'match_date' => _nbaleague_get_date_from_submit_data(
                $data['match_date']
            )
        ))
        ->condition('match_id', $match_id)
        ->execute();
}

/**
 * Delete a match
 * 
 * @param string $match_id Match Id
 * 
 * @return boolean
 */
function nbaleague_delete_match($match_id)
{
    return db_delete('nbaleague_match')
        ->condition('match_id', $match_id)
        ->execute();
}

/**
 * Return the nbaleague score select
 * 
 * @return SelectQuery
 */
function _nbaleague_get_score_query()
{
    $query = db_select('nbaleague_match_score', 'nbams');
    $query->fields('nbams');
    
    return $query;
}

/**
 * Return the scores from given params
 * 
 * @param srray $data Data
 * 
 * @return boolean|stdClass
 */
function nbaleague_get_scores_from_data($data)
{
    $scores = _nbaleague_get_score_query();
    foreach ($data as $key => $val) {
        $scores->condition('nbams.' . $key, $data[$key], '=');
    }
    
    return $scores->execute();
}

/**
 * Add a new score
 * 
 * @param integer $match_id Match id
 * @param array   $data     Form data from $form_state
 * 
 * @return integer
 */
function nbaleague_add_score($match_id, $data)
{
    global $user;
    
    return db_insert('nbaleague_match_score')
        ->fields(array(
            'match_id' => $match_id,
            'created' => REQUEST_TIME,
            'createdby' => $user->uid
        ))->execute();
}

/**
 * Delete a score
 * 
 * @param string $match_id Match Id
 * 
 * @return boolean
 */
function nbaleague_delete_score($match_id)
{
    return db_delete('nbaleague_match_score')
        ->condition('match_id', $match_id)
        ->execute();
}

/**
 * Helper function to create assoc arrays
 * 
 * @param array $taxonomy Array of taxonomy objects
 * 
 * @return array
 */
function _nbaleague_get_assoc_array_from_taxonomy($taxonomy)
{
    $taxonomyArray = _nbaleague_filter_active_taxonomies($taxonomy);
    
    $assoc = array();
    foreach ($taxonomyArray as $id => $ele) {
        $assoc[$id] = $ele->name->value();
    }

    return $assoc;
}

/**
 * Helper function to remove any taxonomy items with isactive equal to false
 * 
 * @param array $taxonomy Array of taxonomy objects
 * 
 * @return array
 */
function _nbaleague_filter_active_taxonomies($taxonomy)
{
    return array_filter($taxonomy, function ($item) {
        return $item->isactive->value() == '1';
    });
}

/**
 * Get the date from a form submit
 * 
 * @param array  $data    Form data from $form_state
 * @param string $dateKey Date key if your suppling a different date
 * 
 * @return integer
 */
function _nbaleague_get_date_from_submit_data($data, $dateKey = 'date')
{
    // Splice date key
    if (isset($data[$dateKey])) {
        $data = $data[$dateKey];
    }
    
    // Return new time
    return mktime(
        isset($data['hours']) ? $data['hours'] : 0,
        isset($data['minutes']) ? $data['minutes'] : 0,
        isset($data['seconds']) ? $data['seconds'] : 0,
        isset($data['month']) ? $data['month'] : 0,
        isset($data['day']) ? $data['day'] : 0,
        isset($data['year']) ? $data['year'] : 0
    );
}

/**
 * Get a taxonomy by its id
 * 
 * @param integer $id ID
 * 
 * @return stdClass
 */
function _nbaleague_get_taxonomy_by_id($taxonomy_func, $id)
{
    $arr = array_filter($taxonomy_func(), function($ele) use ($id) {
        return $ele->tid->value() == $id;
    });
    
    if ($arr && count($arr) == 1) {
        return array_pop($arr);
    } else {
        return false;
    }
}