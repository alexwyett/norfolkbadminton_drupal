<?php

require_once dirname(__FILE__) . '/nbaleague.taxonomy.inc';

/**
 * Implements hook_menu().
 *
 * @return array
 */
function nbaleague_menu()
{
    $items = array();

    $items['admin/config/nba/league'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('nbaleague_config_form'),
        'title' => 'NBA Leagues',
        'access arguments' => array('nbaleague'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'nbaleague.admin.inc',
        'weight' => 10
    );

    $items['admin/config/nba/leagueimport'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('nbaleague_import_config_form'),
        'title' => 'NBA League - Import matches',
        'access arguments' => array('nbaleague'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'nbaleague.import.inc',
        'weight' => 20
    );

    $items['admin/config/nba/addmatch'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('nbaleague_addmatch_config_form'),
        'title' => 'NBA League - Add match',
        'access arguments' => array('nbaleague_match'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'nbaleague.addmatch.inc',
        'weight' => 30
    );

    return $items;
}

/**
 * Implements hook_permission()
 *
 * @return array
 */
function nbaleague_permission()
{
    return array(
        'nbaleague' => array(
            'title' => 'Manage the league system'
        ),
        'nbaleague_match' => array(
            'title' => 'Allow the use to add matches into the league system'
        )
    );
}

/**
 * Return an array of team taxonomy objects
 *
 * @return array
 */
function nbaleague_get_teams()
{
    return nbacontent_get_vocabulary('nbateam');
}

/**
 * Get a list of active clubs as an assoc array
 * 
 * @return array
 */
function nbaleague_get_teams_assoc()
{
    return _nbaleague_get_assoc_array_from_taxonomy(
        nbaleague_get_teams()
    );
}

/**
 * Get a list of active clubs as an assoc array
 * 
 * @return array
 */
function nbaleague_get_clubteams_assoc()
{
    $teams = _nbaleague_filter_active_taxonomies(nbaleague_get_teams());
    $clubs = array();
    foreach ($teams as $team) {
        if (!isset($clubs[$team->club->value()->title])) {
            $clubs[$team->club->value()->title] = array();
        }
        
        $clubs[$team->club->value()->title][$team->tid->value()] = $team->name->value();
    }
    
    return $clubs;
}

/**
 * Return an array of league taxonomy objects
 *
 * @return array
 */
function nbaleague_get_leagues()
{
    return nbacontent_get_vocabulary('nbaleague');
}

/**
 * Return an array of league ids/ names for select options
 *
 * @return array
 */
function nbaleague_get_leagues_assoc()
{
    return _nbaleague_get_assoc_array_from_taxonomy(
        nbaleague_get_leagues()
    );
}

/**
 * Return an array of season taxonomy objects
 *
 * @return array
 */
function nbaleague_get_seasons()
{
    return nbacontent_get_vocabulary('nbaseason');
}

/**
 * Return an array of league ids/ names for select options
 *
 * @return array
 */
function nbaleague_get_seasons_assoc()
{
    return _nbaleague_get_assoc_array_from_taxonomy(
        nbaleague_get_seasons()
    );
}

/**
 * Helper function to create assoc arrays
 * 
 * @param array $taxonomy Array of taxonomy objects
 * 
 * @return array
 */
function _nbaleague_get_assoc_array_from_taxonomy($taxonomy)
{
    $taxonomyArray = _nbaleague_filter_active_taxonomies($taxonomy);
    
    $assoc = array();
    foreach ($taxonomyArray as $id => $ele) {
        $assoc[$id] = $ele->name->value();
    }

    return $assoc;
}

/**
 * Helper function to remove any taxonomy items with isactive equal to false
 * 
 * @param array $taxonomy Array of taxonomy objects
 * 
 * @return array
 */
function _nbaleague_filter_active_taxonomies($taxonomy)
{
    return array_filter($taxonomy, function ($item) {
        return $item->isactive->value() == '1';
    });
}